{"ast":null,"code":"import axios from 'axios';\n\nfunction kebabCaseToCamel(str) {\n  return str.replace(/(\\-\\w)/g, matches => matches[1].toUpperCase());\n}\n\nclass API {\n  constructor({\n    url\n  }) {\n    this.url = url;\n    this.endpoints = {};\n  }\n  /**\n   * Create and store a single entity's endpoints\n   * @param {A entity Object} entity\n   */\n\n\n  createEntity(entity) {\n    /**\n     * If there is a - in the entity.name, then change it\n     * to camelCase. E.g\n     * ```\n     * myApi.createEntity({ name : 'foo-bar'})\n     * myApi.endpoints.fooBar.getAll(...)\n     */\n    const name = kebabCaseToCamel(entity.name);\n    this.endpoints[name] = this.createBasicCRUDEndpoints(entity);\n  }\n\n  createEntities(arrayOfEntity) {\n    arrayOfEntity.forEach(this.createEntity.bind(this));\n  }\n  /**\n   * Create the basic endpoints handlers for CRUD operations\n   * @param {A entity Object} entity\n   */\n\n\n  createBasicCRUDEndpoints({\n    name\n  }) {\n    var endpoints = {};\n    const resourceURL = `${this.url}`; //endpoints.hello = ({ params={}}, config={} ) => axios.get(resourceURL, { params }, config)\n\n    endpoints.getAllSamples = () => axios.get(`${resourceURL}/samples`);\n\n    endpoints.getOneUser = ({\n      id: uuid\n    }, config = {}) => axios.get(`${this.url + '/samples'}/${uuid}`, config);\n\n    endpoints.getOneProcess = ({\n      id: processName\n    }, config = {}) => axios.get(`${'/categories'}/${processName}`, config);\n\n    return endpoints;\n  }\n\n}\n\nexport default API;","map":{"version":3,"sources":["/Users/laurenho/Desktop/teamtech2020/src/api.js"],"names":["axios","kebabCaseToCamel","str","replace","matches","toUpperCase","API","constructor","url","endpoints","createEntity","entity","name","createBasicCRUDEndpoints","createEntities","arrayOfEntity","forEach","bind","resourceURL","getAllSamples","get","getOneUser","id","uuid","config","getOneProcess","processName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,SAAOA,GAAG,CAACC,OAAJ,CAAa,SAAb,EAAyBC,OAAD,IAAaA,OAAO,CAAC,CAAD,CAAP,CAAWC,WAAX,EAArC,CAAP;AACH;;AAED,MAAMC,GAAN,CAAU;AACNC,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAS;AAChB,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACH;AACD;;;;;;AAIAC,EAAAA,YAAY,CAACC,MAAD,EAAS;AACjB;;;;;;;AAQA,UAAMC,IAAI,GAAGX,gBAAgB,CAACU,MAAM,CAACC,IAAR,CAA7B;AACA,SAAKH,SAAL,CAAeG,IAAf,IAAuB,KAAKC,wBAAL,CAA8BF,MAA9B,CAAvB;AACH;;AAEDG,EAAAA,cAAc,CAACC,aAAD,EAAgB;AAC1BA,IAAAA,aAAa,CAACC,OAAd,CAAsB,KAAKN,YAAL,CAAkBO,IAAlB,CAAuB,IAAvB,CAAtB;AACH;AACD;;;;;;AAIAJ,EAAAA,wBAAwB,CAAE;AAAED,IAAAA;AAAF,GAAF,EAAa;AACjC,QAAIH,SAAS,GAAG,EAAhB;AAEA,UAAMS,WAAW,GAAI,GAAE,KAAKV,GAAI,EAAhC,CAHiC,CAKjC;;AAEAC,IAAAA,SAAS,CAACU,aAAV,GAA0B,MAAMnB,KAAK,CAACoB,GAAN,CAAW,GAAEF,WAAY,UAAzB,CAAhC;;AAEAT,IAAAA,SAAS,CAACY,UAAV,GAAuB,CAAC;AAAEC,MAAAA,EAAE,EAAEC;AAAN,KAAD,EAAeC,MAAM,GAAC,EAAtB,KAA8BxB,KAAK,CAACoB,GAAN,CAAW,GAAG,KAAKZ,GAAL,GAAW,UAAW,IAAGe,IAAK,EAA5C,EAA+CC,MAA/C,CAArD;;AAEAf,IAAAA,SAAS,CAACgB,aAAV,GAA0B,CAAC;AAAEH,MAAAA,EAAE,EAAEI;AAAN,KAAD,EAAsBF,MAAM,GAAC,EAA7B,KAAqCxB,KAAK,CAACoB,GAAN,CAAW,GAAE,aAAc,IAAGM,WAAY,EAA1C,EAA6CF,MAA7C,CAA/D;;AAEA,WAAOf,SAAP;AAEH;;AA5CK;;AAgDV,eAAeH,GAAf","sourcesContent":["import axios from 'axios'\n\nfunction kebabCaseToCamel(str) {\n    return str.replace( /(\\-\\w)/g, (matches) => matches[1].toUpperCase())\n}\n\nclass API {\n    constructor({ url }){\n        this.url = url\n        this.endpoints = {}\n    }\n    /**\n     * Create and store a single entity's endpoints\n     * @param {A entity Object} entity\n     */\n    createEntity(entity) {\n        /**\n         * If there is a - in the entity.name, then change it\n         * to camelCase. E.g\n         * ```\n         * myApi.createEntity({ name : 'foo-bar'})\n         * myApi.endpoints.fooBar.getAll(...)\n         */\n\n        const name = kebabCaseToCamel(entity.name)\n        this.endpoints[name] = this.createBasicCRUDEndpoints(entity)\n    }\n\n    createEntities(arrayOfEntity) {\n        arrayOfEntity.forEach(this.createEntity.bind(this))\n    }\n    /**\n     * Create the basic endpoints handlers for CRUD operations\n     * @param {A entity Object} entity\n     */\n    createBasicCRUDEndpoints( { name } ) {\n        var endpoints = {}\n\n        const resourceURL = `${this.url}`\n\n        //endpoints.hello = ({ params={}}, config={} ) => axios.get(resourceURL, { params }, config)\n\n        endpoints.getAllSamples = () => axios.get(`${resourceURL}/samples`)\n\n        endpoints.getOneUser = ({ id: uuid }, config={}) =>  axios.get(`${ this.url + '/samples'}/${uuid}`, config)\n\n        endpoints.getOneProcess = ({ id: processName }, config={}) =>  axios.get(`${'/categories'}/${processName}`, config)\n\n        return endpoints\n\n    }\n\n}\n\nexport default API"]},"metadata":{},"sourceType":"module"}