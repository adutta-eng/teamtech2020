{"ast":null,"code":"var _jsxFileName = \"/Users/salonigarg/Downloads/teamtech2020/frontend/src/components/DataVis/datavis.js\";\nimport React, { Component } from 'react';\nimport Sunburst from './Sunburst';\nimport './datavis.css';\nimport DateTimeRangePicker from '@wojtekmaj/react-datetimerange-picker';\nimport Button from 'react-bootstrap/Button';\nimport API from '../../api';\nexport default class DataVisualization extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getSunburstData = async (start, end) => {\n      let data = null;\n      const myAPI = new API({\n        url: 'http://localhost:5000'\n      });\n      myAPI.createEntity({\n        name: 'get'\n      });\n      await myAPI.endpoints.get.sunburstData({\n        uuid: \"5ebd070c717f9c1ca90906f41543437a30514f86546931a8acf85f38bf78edbe\"\n      }, {\n        start_timestamp: start\n      }, {\n        end_timestamp: end\n      }).then(response => data = response.data);\n      return JSON.parse(JSON.stringify(data));\n    };\n\n    this.onChangeDateTime = async date => {\n      // Convert date into start and end unix timestamps\n      let start = Math.floor(date[0].getTime() / 1000);\n      let end = Math.floor(date[1].getTime() / 1000); // TODO: Need to replace with start and end vars\n\n      let new_sunburst_data = await this.getSunburstData(1512468142, 1512512500);\n      this.setState(prevState => ({\n        date,\n        sunburstData: new_sunburst_data !== \"No matches\" ? new_sunburst_data : prevState.sunburstData,\n        showSunburst: false\n      }));\n    };\n\n    this.toggleSunburst = () => {\n      this.setState({\n        showSunburst: true\n      });\n    };\n\n    this.displaySunburst = () => {\n      let sunburst = this.state.showSunburst ? /*#__PURE__*/React.createElement(Sunburst, {\n        data: this.state.sunburstData,\n        width: \"800\",\n        height: \"900\",\n        count_member: \"size\",\n        labelFunc: node => node.data.name,\n        _debug: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 46\n        }\n      }) : null;\n      console.log(this.state.sunburstData);\n      return sunburst;\n    };\n\n    this.state = {\n      date: [new Date(), new Date()],\n      startTimestamp: undefined,\n      endTimestamp: undefined,\n      sunburstData: null,\n      showSunburst: false\n    };\n  }\n\n  async componentDidMount() {\n    // Get default sunburst data \n    let data = await this.getSunburstData(undefined, undefined);\n    this.setState({\n      sunburstData: data\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"data-vis-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DateTimeRangePicker, {\n      onChange: this.onChangeDateTime,\n      value: this.state.date,\n      maxDetail: \"second\",\n      clearIcon: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.toggleSunburst,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"View variant = \\\"light\\\"\"), this.displaySunburst());\n  }\n\n}","map":{"version":3,"sources":["/Users/salonigarg/Downloads/teamtech2020/frontend/src/components/DataVis/datavis.js"],"names":["React","Component","Sunburst","DateTimeRangePicker","Button","API","DataVisualization","constructor","props","getSunburstData","start","end","data","myAPI","url","createEntity","name","endpoints","get","sunburstData","uuid","start_timestamp","end_timestamp","then","response","JSON","parse","stringify","onChangeDateTime","date","Math","floor","getTime","new_sunburst_data","setState","prevState","showSunburst","toggleSunburst","displaySunburst","sunburst","state","node","console","log","Date","startTimestamp","undefined","endTimestamp","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Sunburst from './Sunburst';\nimport './datavis.css';\nimport DateTimeRangePicker from '@wojtekmaj/react-datetimerange-picker';\nimport Button from 'react-bootstrap/Button';\n\nimport API from '../../api';\n\nexport default class DataVisualization extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: [new Date(), new Date()],\n      startTimestamp: undefined,\n      endTimestamp: undefined,\n      sunburstData: null,\n      showSunburst: false,\n    };\n  }\n\n  getSunburstData = async(start, end) => {\n    let data = null\n    const myAPI = new API({url: 'http://localhost:5000'})\n    myAPI.createEntity({ name: 'get'})\n    await myAPI.endpoints.get.sunburstData({uuid: \"5ebd070c717f9c1ca90906f41543437a30514f86546931a8acf85f38bf78edbe\"}, {start_timestamp: start}, {end_timestamp: end})\n      .then(response => data = response.data);\n    \n    return JSON.parse(JSON.stringify(data));\n  }\n\n  async componentDidMount() {\n    // Get default sunburst data \n    let data = await this.getSunburstData(undefined, undefined);\n    this.setState({\n      sunburstData: data,\n    })\n  }\n\n  onChangeDateTime = async(date) => {\n    // Convert date into start and end unix timestamps\n    let start = Math.floor(date[0].getTime() / 1000)\n    let end = Math.floor(date[1].getTime() / 1000)\n    // TODO: Need to replace with start and end vars\n    let new_sunburst_data = await this.getSunburstData(1512468142, 1512512500);\n\n    this.setState((prevState) => ({\n      date,\n      sunburstData: new_sunburst_data !== \"No matches\" ? new_sunburst_data : prevState.sunburstData,\n      showSunburst: false,\n    }))\n  }\n\n  toggleSunburst = () => {\n    this.setState({\n      showSunburst: true,\n    })\n  }\n\n  displaySunburst = () => {\n    let sunburst = this.state.showSunburst ? <Sunburst data={this.state.sunburstData}\n      width=\"800\" \n      height=\"900\"           \n      count_member=\"size\"\n      labelFunc={(node)=>node.data.name}\n      _debug={true}\n    /> : null\n    console.log(this.state.sunburstData);\n    return sunburst\n  }\n\n  render() {\n    return (\n      <div className=\"data-vis-page\">\n        <DateTimeRangePicker\n          onChange={this.onChangeDateTime}\n          value={this.state.date}\n          maxDetail = \"second\"\n          clearIcon = {null}\n        />\n        <Button \n        onClick={this.toggleSunburst}>View\n        variant = \"light\"\n        \n        </Button>\n        {this.displaySunburst()}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}