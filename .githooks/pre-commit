#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# # If there are whitespace errors, print the offending file names and fail.
# exec git diff-index --check --cached $against --


# ------------------------------------------------------------------------------
# Block Commits with Passwords, Tokens, or Confidential Information
# ------------------------------------------------------------------------------

# Define list of REGEX to be searched and blocked
regex_list=(
	# block any private key file
	'(\-){5}BEGIN\s?(RSA|OPENSSH|DSA|EC|PGP)?\s?PRIVATE KEY\s?(BLOCK)?(\-){5}.*'
	# block AWS API Keys
	'AKIA[0-9A-Z]{16}'
	# block AWS Secret Access Key (TODO: adjust to not find valid Git SHA1s; false positives)
	# '([^A-Za-z0-9/+=])?([A-Za-z0-9/+=]{40})([^A-Za-z0-9/+=])?'
	# block quoted 16 characters
	"('[0-9A-Za-z]{16}')"
	'("[0-9A-Za-z]{16}")'
)

# Concatenate regex_list
separator="|"
regex="$( printf "${separator}%s" "${regex_list[@]}" )"
# remove leading separator
regex="${regex:${#separator}}"

# Use extended regex to search for a match
# match=`git diff --cached | grep -nE "(${regex})"`
match=`git diff --cached --name-only | xargs grep -nE --with-filename "(${regex})"`

# Verify it's not empty
if [ "${match}" != "" ]; then
	# Found match, exit with error
	echo "[COMMIT BLOCKED] You're trying to commit a password or token"

	# # Debug match
	echo -e "${match}"

	exit 1
else
	# No errors found, exit with success
	echo "[COMMIT PASSED] No passwords or tokens detected"
	exit 0
fi
